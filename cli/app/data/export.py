import os
import datetime
import markdown
from os.path import join
from zipfile import ZipFile
from werkzeug.utils import secure_filename
import simplejson as json

from app.settings import app_cfg
from app.sql.common import Session, Media, Collection, db

SEPARATOR = '------------'

def header(collection):
  return """
<!doctype html>
<html>
<head>
<title>VFrame Report</title>
<style>
body {
  font-family: 'Roboto', sans-serif;
}
img {
  max-width: 20rem;
  margin: 0 1rem 1rem 0;
}
img[alt="VFrame Logo"] {
  width: 5rem;
}
</style>
</head>
<body>
"""

def footer(collection):
  return """
</body>
</html>
"""

def md_img(desc, path):
  return f'![{desc}]({path})'

def export_report(collection):
  media_list = '\n'.join([
    md_img(media.sha256, media.archivepath())
    for media in collection.medias
  ])
  now = datetime.datetime.now().isoformat()

  markdown = f"""
{SEPARATOR}

title: {collection.title}
desc: VFrame report
slug: about
published: {now}

{SEPARATOR}

# {collection.title}

Collection created {collection.created_at.isoformat()} by {collection.username}.

{collection.notes}

{media_list}

![VFrame logo](doc/vframe_logo_h.svg)

Generated by [VFrame](https://vframe.io/)
"""
  return markdown

def convert_json(o):
  if isinstance(o, datetime.datetime):
    return o.__str__()

def export_zip(collection_id):
  """Export a collection as a zip file with all images plus Markdown"""

  session = Session()

  collection = session.query(Collection).get(collection_id)
  zip_path = secure_filename(collection.title)
  zip_fn = zip_path + '.zip'
  os.makedirs(app_cfg.DIR_EXPORTS, exist_ok=True)
  zip_fullpath = join(app_cfg.DIR_EXPORTS, zip_fn)
  zip_url = join(app_cfg.URL_EXPORTS, zip_fn)

  file_list = [
    (media.fullpath(), media.archivepath(),)
    for media in collection.medias
  ]
  file_list.append((
    join(app_cfg.DIR_STATIC, 'img/vframe_logo_h.svg'),
    'doc/vframe_logo_h.svg',
  ))

  with ZipFile(zip_fullpath, 'w') as zip_out:
    for in_fn, archive_fn in file_list:
      zip_out.write(in_fn, join(zip_path, archive_fn))
    report_md = export_report(collection)
    report_html = markdown.markdown(report_md.split(SEPARATOR)[2])
    report_html = header(collection) + report_html + footer(collection)
    zip_out.writestr(join(zip_path, 'report.md'), report_md)
    zip_out.writestr(join(zip_path, 'report.html'), report_html)
    zip_out.writestr(join(zip_path, 'report.json'), json.dumps(collection.toFullJSON(), default=convert_json))

  # log.debug('exported ' + zip_url)
  return zip_url
